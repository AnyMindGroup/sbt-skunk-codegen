name: CI
on:
  push:
    branches: [master]
    tags: [v*]
  pull_request:
concurrency:
  group: ${{ github.workflow }} @ ${{ github.ref }}
  cancel-in-progress: true
jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-15]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: coursier/cache-action@v6
      - uses: VirtusLab/scala-cli-setup@main
      - run: |
          OUT=.bin/codegen_$(uname -m)
          echo "Compiling to $OUT"
          scala-cli --power package \
            --native \
            --native-mode release-fast PgCodeGen.scala \
            -o $OUT -f
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: coursier/cache-action@v6
      - uses: VirtusLab/scala-cli-setup@main
        with:
          jvm: temurin:21
      - run: ./test.sh
  # TODO update release
  release:
    name: Release
    runs-on: ubuntu-latest
    continue-on-error: false
    needs:
    - test
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    steps:
    - name: Git Checkout
      uses: actions/checkout@v4
    - name: Setup JDK
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 21
        cache: sbt
    - name: Import signing key and strip passphrase
      if: env.PGP_SECRET != '' && env.PGP_PASSPHRASE != ''
      env:
        PGP_SECRET: ${{ secrets.PGP_SECRET }}
        PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
      run: |
        echo "$PGP_SECRET" | base64 -d -i - > /tmp/signing-key.gpg
        echo "$PGP_PASSPHRASE" | gpg --pinentry-mode loopback --passphrase-fd 0 --import /tmp/signing-key.gpg
        (echo "$PGP_PASSPHRASE"; echo; echo) | gpg --command-fd 0 --pinentry-mode loopback --change-passphrase $(gpg --list-secret-keys --with-colons 2> /dev/null | grep '^sec:' | cut --delimiter ':' --fields 5 | tail -n 1)
    - name: Release
      run: sbt '++2.12 publishSigned; sonatypeCentralRelease'
      env:
        PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
        PGP_SECRET: ${{ secrets.PGP_SECRET }}
        SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
        SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}